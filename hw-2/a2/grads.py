#############################################################################
### Търсене и извличане на информация. Приложение на дълбоко машинно обучение
### Стоян Михов
### Зимен семестър 2020/2021
#############################################################################
###
### Домашно задание 2
###
#############################################################################

import numpy as np

#############################################################

def sigmoid(x):
    return 1/(1+np.exp(-x))

def lossAndGradient(u_w, Vt):
    ###  Векторът u_w е влагането на целевата дума. shape(u_w) = M.
    ###  Матрицата Vt представя влаганията на контекстните думи. shape(Vt) = (n+1)xM.
    ###  Първият ред на Vt е влагането на коректната контекстна дума, а
    ###  следващите n реда са влаганията на извадката от негативни контекстни думи
    ###
    ###  функцията връща J -- загубата в тази точка;
    ###                  du_w -- градиентът на J спрямо u_w;
    ###                  dVt --  градиентът на J спрямо Vt.
    #############################################################################
    #### Начало на Вашия код. На мястото на pass се очакват 7-15 реда

    rightAJ = ([np.log(sigmoid(-np.dot(u_w, Vt[i]))) for i in range(1,Vt.shape[0])])
    J = - ((np.log(sigmoid(np.dot(u_w, Vt[0])))) + np.sum(rightAJ))

    leftAu_w = (1 - sigmoid(np.dot(u_w, Vt[0]))) * Vt[0]
    rightAu_w = np.sum((1-sigmoid(-np.dot(Vt[1:], u_w[:,np.newaxis] )))*(-Vt[1:]),axis = 0)
    du_w = -(leftAu_w + rightAu_w)

    dVt = np.empty_like(Vt)
    dVt[0] = -(1 - sigmoid(np.dot(u_w, Vt[0]))) * u_w
    dVt[1:] = -(1 - sigmoid(np.dot(-Vt[1:],u_w)))[:,np.newaxis] * (-u_w)
    #### Край на Вашия код
    #############################################################################

    return J, du_w, dVt


def lossAndGradientCumulative(u_w, Vt):
    ###  Изчисляване на загуба и градиент за цяла партида
    ###  Тук за всяко от наблюденията се извиква lossAndGradient
    ###  и се акумулират загубата и градиентите за S-те наблюдения
    Cdu_w = []
    CdVt = []
    CJ = 0
    S = u_w.shape[0]
    for i in range(S):
        J, du_w, dVt = lossAndGradient(u_w[i],Vt[i])
        Cdu_w.append(du_w/S)
        CdVt.append(dVt/S)
        CJ += J/S
    return CJ, Cdu_w, CdVt


def lossAndGradientBatched(u_w, Vt):
    ###  Изчисляване на загуба и градиент за цяла партида.
    ###  Тук едновременно се изчислява загубата и градиентите за S наблюдения.
    ###  Матрицата u_w представя влаганията на целевите думи и shape(u_w) = SxM.
    ###  Тензорът Vt представя S матрици от влагания на контекстните думи и shape(Vt) = Sx(n+1)xM.
    ###  Във всяка от S-те матрици на Vt в първия ред е влагането на коректната контекстна дума, а
    ###  следващите n реда са влаганията на извадката от негативни контекстни думи.
    ###
    ###  Функцията връща J -- загубата за цялата партида;
    ###                  du_w -- матрица с размерност SxM с градиентите на J спрямо u_w за всяко наблюдение;
    ###                  dVt --  с размерност Sx(n+1)xM -- S градиента на J спрямо Vt.
    #############################################################
    ###  От вас се очаква вместо да акумулирате резултатите за отделните наблюдения,
    ###  да използвате тензорни операции, чрез които наведнъж да получите
    ###  резултата за цялата партида. Очаква се по този начин да получите над 2 пъти по-бързо изпълнение.
    #############################################################

    #############################################################################
    #### Начало на Вашия код. На мястото на pass се очакват 10-20 реда

    S = u_w.shape[0]

    rightAJ = np.sum(np.log(sigmoid(-np.matmul(Vt[:,1:],u_w[:,:,np.newaxis]))),axis=1)
    leftAJ = np.array(np.log(sigmoid(np.diagonal(np.dot(u_w, np.transpose(Vt[:,0]))))))
    J = - np.sum(leftAJ + np.sum(rightAJ,axis=1))/S

    leftAu_w = (1 - sigmoid(np.diagonal(np.dot(u_w, np.transpose(Vt[:,0]))))[:,np.newaxis]) * Vt[:,0]
    rightAu_w = np.sum((-Vt[:,1:,:])*(1-sigmoid(-np.matmul(Vt[:,1:],u_w[:,:,np.newaxis]))),axis=1)
    du_w = -(leftAu_w + rightAu_w) / S

    dVt = np.zeros(Vt.shape)
    dVt[:,0] = (1 - (sigmoid(np.diagonal(np.dot(u_w, np.transpose(Vt[:,0])))))[:,np.newaxis]) * u_w
    dVt[:,1:,:] = (-u_w[:,np.newaxis,:])*(1-sigmoid(-np.matmul(Vt[:,1:],u_w[:,:,np.newaxis])))

    dVt = -dVt / S

    #### Край на Вашия код
    #############################################################################
    return J, du_w, dVt
